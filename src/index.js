const fs = require('fs');
const path = require('path');
const { Client, Events, REST, Routes, SlashCommandBuilder, GatewayIntentBits } = require('discord.js');
const { token, clientId, guildId, channelId } = require('./config.json');
const ACHIEVEMENTS = require('./achievements.js');

const COOLDOWN_TIME = 3600000;
const COOLDOWN_DB_PATH = path.resolve(__dirname, "./cooldowns.json");

let cooldowns = {};
if (fs.existsSync(COOLDOWN_DB_PATH)) {
    try {
        const data = fs.readFileSync(COOLDOWN_DB_PATH, 'utf-8');
        cooldowns = JSON.parse(data);
    } catch (err) {
        console.error('Error reading cooldowns.json, starting with empty cooldowns.', err);
        cooldowns = {};
    }
}

function saveCooldowns() {
    try {
        fs.writeFileSync(COOLDOWN_DB_PATH, JSON.stringify(cooldowns, null, 2), 'utf-8');
    } catch (err) {
        console.error('Error writing cooldowns.json', err);
    }
}

const commands = [
    new SlashCommandBuilder()
        .setName('–∫–æ–º–∞—Ä—É')
        .setDescription('–û—Ç–ø—Ä–∞–≤–∏—Ç –∫–∞—Ä—Ç–æ—á–∫—É')
        .toJSON(),
    new SlashCommandBuilder()
        .setName('—Å–±—Ä–æ—Å')
        .setDescription('–°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å')
        .toJSON(),
    new SlashCommandBuilder()
        .setName('–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
        .setDescription('–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫')
        .toJSON(),
    new SlashCommandBuilder()
        .setName('—Ç–æ–ø')
        .setDescription('–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ –º–æ–Ω–µ—Ç')
        .toJSON(),
    new SlashCommandBuilder()
        .setName('–∫–æ–º–∞–Ω–¥—ã')
        .setDescription('–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥')
        .toJSON(),
    new SlashCommandBuilder()
        .setName('–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è')
        .setDescription('–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è')
        .addUserOption(option =>
            option.setName('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                .setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —á—å–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å')
                .setRequired(false))
        .toJSON(),
    new SlashCommandBuilder()
        .setName('–∫–æ–ª–ª–µ–∫—Ü–∏—è')
        .setDescription('–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é –∫–∞—Ä—Ç–æ—á–µ–∫')
        .toJSON()
];

const rest = new REST({ version: '10' }).setToken(token);

(async () => {
    console.log('Started refreshing application (/) commands.');

    try {
        await rest.put(
            Routes.applicationGuildCommands(clientId, guildId),
            { body: commands }
        );
        console.log('Successfully reloaded application (/) commands.');
    } catch (error) {
        console.error(error);
    }
})();

const client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent] });

client.once(Events.ClientReady, async readyClient => {
    console.log(`Ready! Card bot Logged in as ${readyClient.user.tag}`);

    client.user.setActivity('KBRP.ru', { type: 'PLAYING' });

    const channel = await client.channels.fetch(channelId).catch(console.error);

    if (!channel) {
        console.error(`Channel with ID ${channelId} not found!`);
        return;
    }

    setInterval(() => {
        channel.send('## üé¥ –í—Ä–µ–º—è —Å–æ–±–∏—Ä–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏!\n\n' +
                    '### ‚ú® –ù–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∂–¥–µ—Ç —Ç–µ–±—è!\n' +
                    '‚îî –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É `/–∫–æ–º–∞—Ä—É` —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ—ë\n\n' +
                    '### üí´ –ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å?\n' +
                    '‚îî üü¢ –û–±—ã—á–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏\n' +
                    '‚îî üü£ –ù–µ–æ–±—ã—á–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏\n' +
                    '‚îî üîµ –†–µ–¥–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏\n' +
                    '‚îî üü† –≠–ø–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏\n' +
                    '‚îî üü° –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏\n\n' +
                    '### ‚ö°Ô∏è –ù–µ —É–ø—É—Å—Ç–∏ —Å–≤–æ–π —à–∞–Ω—Å!');
    }, 3600000); 

});

client.on(Events.InteractionCreate, async interaction => {
    if (!interaction.isChatInputCommand()) return;

    if (interaction.commandName === '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è') {
        await interaction.reply({
            content: `## üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏\n\n` +
                    `üü¢ **–û–±—ã—á–Ω—ã–µ**: ~40% –∫–∞—Ä—Ç–æ—á–µ–∫\n` +
                    `üü£ **–ù–µ–æ–±—ã—á–Ω—ã–µ**: ~25% –∫–∞—Ä—Ç–æ—á–µ–∫\n` +
                    `üü£ **–†–µ–¥–∫–∏–µ**: ~15% –∫–∞—Ä—Ç–æ—á–µ–∫\n` +
                    `üü† **–≠–ø–∏—á–µ—Å–∫–∏–µ**: ~10% –∫–∞—Ä—Ç–æ—á–µ–∫\n` +
                    `üü° **–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ**: ~10% –∫–∞—Ä—Ç–æ—á–µ–∫`
        });
        return;
    }

    if (interaction.commandName === '—Å–±—Ä–æ—Å') {
        const userId = interaction.user.id;
        
        // Load storage data
        let storage = {};
        if (fs.existsSync(path.resolve(__dirname, './storage.json'))) {
            try {
                const data = fs.readFileSync(path.resolve(__dirname, './storage.json'), 'utf-8');
                storage = JSON.parse(data);
            } catch (err) {
                console.error('Error reading storage.json', err);
                storage = {};
            }
        }

        // Reset user's data
        storage[userId] = {
            cardsUnlockedCount: "0",
            coins: "0",
            unlockedCards: {}
        };

        // Save updated storage
        try {
            fs.writeFileSync(path.resolve(__dirname, './storage.json'), JSON.stringify(storage, null, 2), 'utf-8');
            await interaction.reply({
                content: '‚úÖ –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω!'
            });
        } catch (err) {
            console.error('Error writing storage.json', err);
            await interaction.reply({
                content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.'
            });
        }
        return;
    }

    if (interaction.commandName === '–∫–æ–º–∞—Ä—É') {
        const userId = interaction.user.id;
        const username = interaction.user.username;
        const now = Date.now();

        if (cooldowns[userId]) {
            const elapsed = now - cooldowns[userId];
            if (elapsed < COOLDOWN_TIME) {
                const remainingMs = COOLDOWN_TIME - elapsed;
                const remainingMinutes = Math.floor(remainingMs / 60000);
                const remainingSeconds = Math.floor((remainingMs % 60000) / 1000);
                await interaction.reply({
                    content: `–í—ã –∏—Å–∫–∞–ª–∏, –Ω–æ –ö–æ–º–∞—Ä—É –Ω–µ –æ–∫–∞–∑–∞–ª–æ—Å—å —Ä—è–¥–æ–º üëª. \n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ ${remainingMinutes} –º–∏–Ω—É—Ç –∏ ${remainingSeconds} —Å–µ–∫—É–Ω–¥.`
                });
                return;
            }
        }

        cooldowns[userId] = now;
        saveCooldowns();

        // Load storage data
        let storage = {};
        if (fs.existsSync(path.resolve(__dirname, './storage.json'))) {
            try {
                const data = fs.readFileSync(path.resolve(__dirname, './storage.json'), 'utf-8');
                storage = JSON.parse(data);
            } catch (err) {
                console.error('Error reading storage.json', err);
                storage = {};
            }
        }

        // Initialize user storage if doesn't exist
        if (!storage[userId]) {
            storage[userId] = {
                cardsUnlockedCount: "0",
                coins: "0",
                unlockedCards: {}
            };
        }

        const cards = require('./cards.json');
        const cardNames = Object.keys(cards);
        
        // Filter out cards that user already has
        const availableCards = cardNames.filter(cardName => !storage[userId].unlockedCards[cardName]);
        
        // If user has all cards, reset available cards
        const randomCard = availableCards.length > 0 
            ? availableCards[Math.floor(Math.random() * availableCards.length)]
            : cardNames[Math.floor(Math.random() * cardNames.length)];

        const cardPath = cards[randomCard].image_path;
        const cardRarity = cards[randomCard].rare;
        const cardCoins = parseInt(cards[randomCard].coins);

        // Update user's storage
        storage[userId].unlockedCards[randomCard] = true;
        storage[userId].cardsUnlockedCount = (parseInt(storage[userId].cardsUnlockedCount) + 1).toString();
        storage[userId].coins = (parseInt(storage[userId].coins) + cardCoins).toString();

        // Save updated storage
        try {
            fs.writeFileSync(path.resolve(__dirname, './storage.json'), JSON.stringify(storage, null, 2), 'utf-8');
        } catch (err) {
            console.error('Error writing storage.json', err);
        }

        // Create a more beautiful card opening message
        const rarityEmojis = {
            common: 'üü¢',
            uncommon: 'üü£',
            rare: 'üîµ',
            epic: 'üü†',
            legendary: 'üü°'
        };

        const rarityColors = {
            common: '#2ecc71',    // Green
            uncommon: '#9b59b6',  // Purple
            rare: '#3498db',      // Blue
            epic: '#e67e22',      // Orange
            legendary: '#f1c40f'  // Yellow
        };

        const rarityNames = {
            common: '–û–±—ã—á–Ω–∞—è',
            uncommon: '–ù–µ–æ–±—ã—á–Ω–∞—è',
            rare: '–†–µ–¥–∫–∞—è',
            epic: '–≠–ø–∏—á–µ—Å–∫–∞—è',
            legendary: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è'
        };

        const cardMessage = `## üé¥ –ù–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞!

### ${rarityEmojis[cardRarity]} ${randomCard}
‚îî ${rarityNames[cardRarity]}

### üí∞ –ù–∞–≥—Ä–∞–¥–∞
‚îî –ü–æ–ª—É—á–µ–Ω–æ –º–æ–Ω–µ—Ç: ${cardCoins}
‚îî –í—Å–µ–≥–æ –º–æ–Ω–µ—Ç: ${storage[userId].coins}

### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚îî –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: ${storage[userId].cardsUnlockedCount}`;

        await interaction.reply({
            content: cardMessage,
            files: [path.resolve(__dirname, cardPath)]
        });

        // Update achievement notification to only show new achievements
        const newAchievements = checkAchievements(userId, storage, cardRarity);
        if (newAchievements.length > 0) {
            let achievementMessage = '## üéâ –ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!\n\n';
            newAchievements.forEach(achievement => {
                achievementMessage += `${achievement.icon} **${achievement.name}**\n`;
                achievementMessage += `‚îî ${achievement.description}\n\n`;
            });
            
            await interaction.followUp({
                content: achievementMessage
            });
        }
    }

    if (interaction.commandName === '—Ç–æ–ø') {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        let storage = {};
        if (fs.existsSync(path.resolve(__dirname, './storage.json'))) {
            try {
                const data = fs.readFileSync(path.resolve(__dirname, './storage.json'), 'utf-8');
                storage = JSON.parse(data);
            } catch (err) {
                console.error('Error reading storage.json', err);
                await interaction.reply({
                    content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö.'
                });
                return;
            }
        }

        // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        const players = Object.entries(storage).map(([userId, data]) => ({
            userId,
            cardsCount: parseInt(data.cardsUnlockedCount),
            coins: parseInt(data.coins)
        }));

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∞—Ä—Ç–æ—á–µ–∫
        const topByCards = [...players].sort((a, b) => b.cardsCount - a.cardsCount).slice(0, 10);
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–æ–Ω–µ—Ç
        const topByCoins = [...players].sort((a, b) => b.coins - a.coins).slice(0, 10);

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        let message = '## üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤\n\n';
        
        message += '### üëë –¢–æ–ø –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∞—Ä—Ç–æ—á–µ–∫:\n';
        for (const [index, player] of topByCards.entries()) {
            let user = client.users.cache.get(player.userId);
            if (!user) {
                try {
                    user = await client.users.fetch(player.userId);
                } catch (err) {
                    console.error(`Error fetching user ${player.userId}:`, err);
                }
            }
            const username = user ? user.username : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫';
            message += `${index + 1}. ${username} - ${player.cardsCount} –∫–∞—Ä—Ç–æ—á–µ–∫\n`;
        }

        message += '\n### üí∞ –¢–æ–ø –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–æ–Ω–µ—Ç:\n';
        for (const [index, player] of topByCoins.entries()) {
            let user = client.users.cache.get(player.userId);
            if (!user) {
                try {
                    user = await client.users.fetch(player.userId);
                } catch (err) {
                    console.error(`Error fetching user ${player.userId}:`, err);
                }
            }
            const username = user ? user.username : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫';
            message += `${index + 1}. ${username} - ${player.coins} –º–æ–Ω–µ—Ç\n`;
        }

        await interaction.reply({
            content: message
        });
        return;
    }

    if (interaction.commandName === '–∫–æ–º–∞–Ω–¥—ã') {
        const commandsList = `
## üìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥

### üé¥ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
\`/–∫–æ–º–∞—Ä—É\` - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
\`/–∫–æ–ª–ª–µ–∫—Ü–∏—è\` - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é –∫–∞—Ä—Ç–æ—á–µ–∫
\`/–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\` - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
\`/—Ç–æ–ø\` - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ –º–æ–Ω–µ—Ç
\`/–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\` - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è

### ‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
\`/—Å–±—Ä–æ—Å\` - –°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å
\`/–∫–æ–º–∞–Ω–¥—ã\` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥

### ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
‚Ä¢ –ö—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫–∞—Ä—Ç–æ—á–µ–∫: 1 —á–∞—Å
‚Ä¢ –ö–∞—Ä—Ç–æ—á–∫–∏ –∏–º–µ—é—Ç —Ä–∞–∑–Ω—É—é —Ä–µ–¥–∫–æ—Å—Ç—å: –û–±—ã—á–Ω—ã–µ, –ù–µ–æ–±—ã—á–Ω—ã–µ, –†–µ–¥–∫–∏–µ, –≠–ø–∏—á–µ—Å–∫–∏–µ –∏ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ
‚Ä¢ –ó–∞ –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç–æ—á–∫—É –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –º–æ–Ω–µ—Ç—ã, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–¥–∫–æ—Å—Ç–∏
`;

        await interaction.reply({
            content: commandsList
        });
        return;
    }

    if (interaction.commandName === '–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è') {
        const targetUser = interaction.options.getUser('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å') || interaction.user;
        const userId = targetUser.id;
        let storage = {};
        
        if (fs.existsSync(path.resolve(__dirname, './storage.json'))) {
            try {
                const data = fs.readFileSync(path.resolve(__dirname, './storage.json'), 'utf-8');
                storage = JSON.parse(data);
            } catch (err) {
                console.error('Error reading storage.json', err);
                await interaction.reply({
                    content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö.'
                });
                return;
            }
        }

        if (!storage[userId] || !storage[userId].achievements) {
            await interaction.reply({
                content: targetUser.id === interaction.user.id 
                    ? '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏!'
                    : `–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUser.username} –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.`
            });
            return;
        }

        const userAchievements = storage[userId].achievements;
        let message = `## üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è ${targetUser.username}\n\n`;
        
        Object.entries(ACHIEVEMENTS).forEach(([id, achievement]) => {
            const isUnlocked = userAchievements[id] || false;
            message += `${isUnlocked ? '‚úÖ' : '‚ùå'} ${achievement.icon} **${achievement.name}**\n`;
            message += `‚îî ${achievement.description}\n\n`;
        });

        const totalAchievements = Object.keys(ACHIEVEMENTS).length;
        const unlockedAchievements = Object.values(userAchievements).filter(Boolean).length;
        message += `\n**–ü—Ä–æ–≥—Ä–µ—Å—Å:** ${unlockedAchievements}/${totalAchievements} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π`;

        await interaction.reply({
            content: message
        });
        return;
    }

    if (interaction.commandName === '–∫–æ–ª–ª–µ–∫—Ü–∏—è') {
        const userId = interaction.user.id;
        let storage = {};
        
        if (fs.existsSync(path.resolve(__dirname, './storage.json'))) {
            try {
                const data = fs.readFileSync(path.resolve(__dirname, './storage.json'), 'utf-8');
                storage = JSON.parse(data);
            } catch (err) {
                console.error('Error reading storage.json', err);
                await interaction.reply({
                    content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö.'
                });
                return;
            }
        }

        if (!storage[userId] || !storage[userId].unlockedCards) {
            await interaction.reply({
                content: '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /–∫–æ–º–∞—Ä—É —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–±–∏—Ä–∞—Ç—å!'
            });
            return;
        }

        const cards = require('./cards.json');
        const userCards = storage[userId].unlockedCards;
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
        const cardsByRarity = {
            common: [],
            uncommon: [],
            rare: [],
            epic: [],
            legendary: []
        };

        Object.entries(userCards).forEach(([cardName, isUnlocked]) => {
            if (isUnlocked && cards[cardName]) {
                const card = cards[cardName];
                cardsByRarity[card.rare].push({
                    name: cardName,
                    image: card.image_path,
                    coins: card.coins
                });
            }
        });

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        let message = '## üé¥ –í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫\n\n';
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const totalCards = Object.values(cardsByRarity).reduce((sum, arr) => sum + arr.length, 0);
        message += `**–í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫:** ${totalCards}\n\n`;

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
        const rarityNames = {
            common: 'üü¢ –û–±—ã—á–Ω—ã–µ',
            uncommon: 'üü£ –ù–µ–æ–±—ã—á–Ω—ã–µ',
            rare: 'üîµ –†–µ–¥–∫–∏–µ',
            epic: 'üü† –≠–ø–∏—á–µ—Å–∫–∏–µ',
            legendary: 'üü° –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ'
        };

        Object.entries(cardsByRarity).forEach(([rarity, cards]) => {
            if (cards.length > 0) {
                message += `### ${rarityNames[rarity]} (${cards.length})\n`;
                cards.forEach(card => {
                    message += `‚Ä¢ **${card.name}** - ${card.coins} –º–æ–Ω–µ—Ç\n`;
                });
                message += '\n';
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        const totalPossibleCards = Object.keys(cards).length;
        const completionPercentage = Math.round((totalCards / totalPossibleCards) * 100);
        message += `\n**–ü—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–ª–ª–µ–∫—Ü–∏–∏:** ${completionPercentage}% (${totalCards}/${totalPossibleCards})`;

        await interaction.reply({
            content: message
        });
        return;
    }
});

function checkAchievements(userId, storage, cardRarity) {
    if (!storage[userId].achievements) {
        storage[userId].achievements = {};
    }

    const userData = storage[userId];
    const achievements = userData.achievements;
    const newAchievements = [];
    const cards = require('./cards.json');

    // Helper function to check and add new achievement
    const checkAndAddAchievement = (achievementId, condition) => {
        if (!achievements[achievementId] && condition) {
            achievements[achievementId] = true;
            newAchievements.push(ACHIEVEMENTS[achievementId]);
        }
    };

    // Count cards by rarity
    const rarityCounts = {
        common: 0,
        uncommon: 0,
        rare: 0,
        epic: 0,
        legendary: 0
    };

    Object.entries(userData.unlockedCards).forEach(([cardName, isUnlocked]) => {
        if (isUnlocked) {
            const card = require('./cards.json')[cardName];
            if (card && card.rare) {
                rarityCounts[card.rare]++;
            }
        }
    });

    // Check achievements
    checkAndAddAchievement('firstCard', parseInt(userData.cardsUnlockedCount) > 0);
    checkAndAddAchievement('cardCollector', parseInt(userData.cardsUnlockedCount) >= 10);
    checkAndAddAchievement('cardMaster', parseInt(userData.cardsUnlockedCount) >= 50);
    checkAndAddAchievement('legendaryCard', cardRarity === 'legendary');
    checkAndAddAchievement('epicCollector', rarityCounts.epic >= 5);
    checkAndAddAchievement('rareCollector', rarityCounts.rare >= 10);
    checkAndAddAchievement('coinCollector', parseInt(userData.coins) >= 1000);
    checkAndAddAchievement('coinMaster', parseInt(userData.coins) >= 5000);
    checkAndAddAchievement('commonCollector', rarityCounts.common >= 20);
    checkAndAddAchievement('uncommonCollector', rarityCounts.uncommon >= 15);
    checkAndAddAchievement('firstEpic', cardRarity === 'epic');
    checkAndAddAchievement('firstRare', cardRarity === 'rare');
    checkAndAddAchievement('firstUncommon', cardRarity === 'uncommon');
    checkAndAddAchievement('legendaryMaster', rarityCounts.legendary >= 3);
    checkAndAddAchievement('epicMaster', rarityCounts.epic >= 10);
    checkAndAddAchievement('rareMaster', rarityCounts.rare >= 20);
    checkAndAddAchievement('coinLegend', parseInt(userData.coins) >= 10000);
    checkAndAddAchievement('collectionMaster', parseInt(userData.cardsUnlockedCount) >= 100);
    checkAndAddAchievement('cardEnthusiast', parseInt(userData.cardsUnlockedCount) >= 3);
    checkAndAddAchievement('cardAddict', parseInt(userData.cardsUnlockedCount) >= 14);
    checkAndAddAchievement('cardLegend', parseInt(userData.cardsUnlockedCount) >= 100);
    checkAndAddAchievement('coinMillionaire', parseInt(userData.coins) >= 100000);
    checkAndAddAchievement('coinBillionaire', parseInt(userData.coins) >= 1000000);
    checkAndAddAchievement('cardArchivist', parseInt(userData.cardsUnlockedCount) >= 200);
    checkAndAddAchievement('cardHistorian', parseInt(userData.cardsUnlockedCount) >= 500);
    checkAndAddAchievement('cardMythologist', parseInt(userData.cardsUnlockedCount) >= 1000);

    // Check for cardPerfectionist achievement
    const allCardsOfRarity = {};
    Object.entries(userData.unlockedCards).forEach(([cardName, isUnlocked]) => {
        if (isUnlocked) {
            const card = require('./cards.json')[cardName];
            if (card && card.rare) {
                allCardsOfRarity[card.rare] = (allCardsOfRarity[card.rare] || 0) + 1;
            }
        }
    });

    // Check if user has all cards of any rarity
    const rarityTotals = {};
    Object.values(cards).forEach(card => {
        if (card.rare) {
            rarityTotals[card.rare] = (rarityTotals[card.rare] || 0) + 1;
        }
    });

    Object.entries(allCardsOfRarity).forEach(([rarity, count]) => {
        if (count === rarityTotals[rarity]) {
            checkAndAddAchievement('cardPerfectionist', true);
        }
    });

    // Check for cardGod achievement
    const totalCards = Object.keys(cards).length;
    checkAndAddAchievement('cardGod', parseInt(userData.cardsUnlockedCount) === totalCards);

    // Save storage if there are new achievements
    if (newAchievements.length > 0) {
        try {
            fs.writeFileSync(path.resolve(__dirname, './storage.json'), JSON.stringify(storage, null, 2), 'utf-8');
        } catch (err) {
            console.error('Error saving achievements to storage.json', err);
        }
    }

    return newAchievements;
}

client.login(token);